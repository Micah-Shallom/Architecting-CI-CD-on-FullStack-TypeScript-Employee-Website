name : Project-Workflow

# on: 
#   push:
#     branches: [dev , pipeline_build]
#   pull_request:
#     branches: [dev]

# on: 
#   workflow_dispatch
    
  # workflow_dispatch:
  #   inputs:
  #     instance-name:
  #       description: Name of Server
  #       required: true
  #       default: 'Learning Management System Server Deployment'
  #       type: string
    
on: [push]

jobs:
  build-frontend:
    name: Build-Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: ----------=====Setup NodeJS on Ubuntu Runner=====-------------
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json
      
      - name: ----------=====Cache Node Modules=====-------------
        uses: actions/cache@master
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-nodeFrontend-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nodeFrontend-

      - name: ----------=====Install Dependencies=====-------------
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd frontend
          npm install
  
      - name: ----------=====Building Application=====-------------
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd frontend
          npm install
          npm run build

  build-backend:
    name: Build-Backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: ----------=====Setup NodeJS on Ubuntu Runner=====-------------
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json
      
      - name: ----------=====Cache Node Modules=====-------------
        uses: actions/cache@master
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
          key: ${{ runner.os }}-nodeBackend-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nodeBackend-

      - name: ----------=====Install Dependencies=====-------------
        # if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd backend
          npm install
  
      - name: ----------=====Building Application=====-------------
        # if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd backend
          npm install 
          npm run build


  # scan-frontend:
  #   name: Scan-Frontend
  #   runs-on: ubuntu-latest
  #   needs: [build-frontend]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: ----------=====Setup NodeJS on Ubuntu Runner=====-------------
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: ----------=====Fixing Build Vulnerabilities=====-------------
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: |
  #         npm i
  #         npm audit fix --audit-level=critical --force
  #         npm audit fix --force
  #         npm audit --audit-level=critical


  # deploy-infrastructure:
  #   name: Deploy-Infrastructure
  #   runs-on: ubuntu-latest
  #   # needs: [build-frontend, scan-frontend]
  #   steps:
  #     - name: ----------=====Checkout Repo=====-------------
  #       uses: actions/checkout@v1

  #     - name: ----------=====Configure AWS Credentials=====-------------
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.TF_USER_AWS_KEY }}
  #         aws-secret-access-key: ${{ secrets.TF_USER_AWS_SECRET }}
  #         aws-region: us-east-1

  #     - name: ----------=====Setup Terraform=====-------------
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_wrapper: false

  #     - name: ----------=====Terraform Apply=====-------------
  #       id: apply
  #       run: |
  #         cd infrastructure/terraform
  #         terraform init
  #         terraform validate
  #         # terraform plan 
  #         terraform apply --auto-approve

  #     - name: ----------=====Get EC2 IP Address=====-------------
  #       run : |
  #         cd infrastructure/terraform
  #         terraform init
  #         echo $(terraform output ec2_public_ip) >> ../ansible/inventory.txt
  #         cat ../ansible/inventory.txt
      
  #     - name: ----------=====Upload Inventory to Workspace=====-------------
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ec2_inventory
  #         path: infrastructure/ansible/inventory.txt

  
  # configure-infrastructure:
  #   name: Configure-Infrastructure
  #   runs-on: ubuntu-latest
  #   needs: [deploy-infrastructure]
  #   env:
  #     ANSIBLE_HOST_KEY_CHECKING: False

  #   steps:
  #   - name: ----------=====Checkout Repo=====-------------
  #     uses: actions/checkout@v1

  #   - name: ----------=====Setup Python=====-------------
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9

  #   - name: ----------=====Install Dependencies=====-------------
  #     run: |
  #       python3 -m venv env
  #       source env/bin/activate
  #       python3 -m pip install --upgrade pip

  #   - name: ----------=====Output SSH to config=====-------------
  #     run: |
  #       mkdir ~/.ssh
  #       echo "${{secrets.ANSIBLE_PRIVATE_KEY}}" > ~/.ssh/id_rsa
  #       chmod 400 ~/.ssh/id_rsa
    
  #   - name: ----------=====Attaching Workspace=====-------------
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: ec2_inventory
  #       path: infrastructure/ansible/

  #   - name: ----------=====Configuring Server=====-------------
  #     working-directory: ./infrastructure/ansible
  #     run: |
  #       cat inventory.txt
  #       ansible-playbook -i inventory.txt configure-server.yml

  # deploy-application:
  #   name: Deploy-Application
  #   runs-on: ubuntu-latest
  #   needs: [configure-infrastructure]
  #   env:
  #     ANSIBLE_HOST_KEY_CHECKING: False

  #   steps:
  #   - name: ----------===== ⬇️ Checkout Repo=====-------------
  #     uses: actions/checkout@v1

  #   - name: ----------=====🔩 Setup Python=====-------------
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9

  #   - name: ----------===== ⬇️ Install Dependencies=====-------------
  #     run: |
  #       python3 -m venv env
  #       source env/bin/activate
  #       python3 -m pip install --upgrade pip

  #   - name: ----------===== 📳 Output SSH to config=====-------------
  #     run: |
  #       mkdir ~/.ssh
  #       echo "${{secrets.ANSIBLE_PRIVATE_KEY}}" > ~/.ssh/id_rsa
  #       chmod 400 ~/.ssh/id_rsa
    
  #   - name: ----------=====🔗 Attaching Workspace =====-------------
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: ec2_inventory
  #       path: infrastructure/ansible/


  #   - name: ----------===== 🌱 Building app into Artifact =====-------------
  #     if: steps.cache.outputs.cache-hit != 'true'
  #     run: |
  #       npm i
  #       npm run build
  #       npm install quasa
  #       cd ..
  #       tar -C learning-management-system/ -czvf artifact.tar.gz --exclude="node_modules" .
  #       ls 
  #       echo "----------------------"
  #       mkdir -p learning-management-system/infrastructure/ansible/roles/deploy/files/
  #       mv artifact.tar.gz learning-management-system/infrastructure/ansible/roles/deploy/files/artifact.tar.gz
  #       ls 
  #       echo "----------------------"
  #       cd learning-management-system/
  #       quasar devc
        

  #   - name: ----------===== 🕹️🔩 Configuring Server =====-------------
  #     working-directory: ./infrastructure/ansible
  #     run: |
  #       ansible-playbook -i inventory.txt deploy-server.yml

  
  

  # destroy-infrastructure:
  #   name: Destroying Backend Server Infrastructure
  #   runs-on: ubuntu-latest
  #   needs: [deploy-infrastructure]
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v1

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.TF_USER_AWS_KEY }}
  #         aws-secret-access-key: ${{ secrets.TF_USER_AWS_SECRET }}
  #         aws-region: us-east-1

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_wrapper: false

  #     - name: Terraform Destroy
  #       id: destroy
  #       run: |
  #         cd infrastructure/terraform
  #         terraform init
  #         terraform destroy --auto-approve













  